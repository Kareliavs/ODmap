import {
  __esm
} from "./chunk-AUZ3RYOM.js";

// node_modules/d3-array/src/ascending.js
function ascending_default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
var init_ascending = __esm({
  "node_modules/d3-array/src/ascending.js"() {
  }
});

// node_modules/d3-array/src/bisector.js
function bisector_default(compare) {
  if (compare.length === 1)
    compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0)
          lo = mid + 1;
        else
          hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0)
          hi = mid;
        else
          lo = mid + 1;
      }
      return lo;
    }
  };
}
function ascendingComparator(f) {
  return function(d, x) {
    return ascending_default(f(d), x);
  };
}
var init_bisector = __esm({
  "node_modules/d3-array/src/bisector.js"() {
    init_ascending();
  }
});

// node_modules/d3-array/src/bisect.js
var ascendingBisect, bisectRight, bisectLeft, bisect_default;
var init_bisect = __esm({
  "node_modules/d3-array/src/bisect.js"() {
    init_ascending();
    init_bisector();
    ascendingBisect = bisector_default(ascending_default);
    bisectRight = ascendingBisect.right;
    bisectLeft = ascendingBisect.left;
    bisect_default = bisectRight;
  }
});

// node_modules/d3-array/src/range.js
function range_default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
  while (++i < n) {
    range[i] = start + i * step;
  }
  return range;
}
var init_range = __esm({
  "node_modules/d3-array/src/range.js"() {
  }
});

// node_modules/d3-array/src/ticks.js
function ticks_default(start, stop, count) {
  var reverse, i = -1, n, ticks, step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0)
    return [start];
  if (reverse = stop < start)
    n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));
    while (++i < n)
      ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));
    while (++i < n)
      ticks[i] = (start - i) / step;
  }
  if (reverse)
    ticks.reverse();
  return ticks;
}
function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop < start ? -step1 : step1;
}
var e10, e5, e2;
var init_ticks = __esm({
  "node_modules/d3-array/src/ticks.js"() {
    e10 = Math.sqrt(50);
    e5 = Math.sqrt(10);
    e2 = Math.sqrt(2);
  }
});

// node_modules/d3-array/src/number.js
function number_default(x) {
  return x === null ? NaN : +x;
}
var init_number = __esm({
  "node_modules/d3-array/src/number.js"() {
  }
});

// node_modules/d3-array/src/quantile.js
function quantile_default(values, p, valueof) {
  if (valueof == null)
    valueof = number_default;
  if (!(n = values.length))
    return;
  if ((p = +p) <= 0 || n < 2)
    return +valueof(values[0], 0, values);
  if (p >= 1)
    return +valueof(values[n - 1], n - 1, values);
  var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
var init_quantile = __esm({
  "node_modules/d3-array/src/quantile.js"() {
    init_number();
  }
});

// node_modules/d3-array/src/pairs.js
var init_pairs = __esm({
  "node_modules/d3-array/src/pairs.js"() {
  }
});

// node_modules/d3-array/src/cross.js
var init_cross = __esm({
  "node_modules/d3-array/src/cross.js"() {
    init_pairs();
  }
});

// node_modules/d3-array/src/descending.js
var init_descending = __esm({
  "node_modules/d3-array/src/descending.js"() {
  }
});

// node_modules/d3-array/src/variance.js
var init_variance = __esm({
  "node_modules/d3-array/src/variance.js"() {
    init_number();
  }
});

// node_modules/d3-array/src/deviation.js
var init_deviation = __esm({
  "node_modules/d3-array/src/deviation.js"() {
    init_variance();
  }
});

// node_modules/d3-array/src/extent.js
var init_extent = __esm({
  "node_modules/d3-array/src/extent.js"() {
  }
});

// node_modules/d3-array/src/array.js
var array, slice, map;
var init_array = __esm({
  "node_modules/d3-array/src/array.js"() {
    array = Array.prototype;
    slice = array.slice;
    map = array.map;
  }
});

// node_modules/d3-array/src/constant.js
var init_constant = __esm({
  "node_modules/d3-array/src/constant.js"() {
  }
});

// node_modules/d3-array/src/identity.js
var init_identity = __esm({
  "node_modules/d3-array/src/identity.js"() {
  }
});

// node_modules/d3-array/src/threshold/sturges.js
var init_sturges = __esm({
  "node_modules/d3-array/src/threshold/sturges.js"() {
  }
});

// node_modules/d3-array/src/histogram.js
var init_histogram = __esm({
  "node_modules/d3-array/src/histogram.js"() {
    init_array();
    init_bisect();
    init_constant();
    init_extent();
    init_identity();
    init_range();
    init_ticks();
    init_sturges();
  }
});

// node_modules/d3-array/src/threshold/freedmanDiaconis.js
var init_freedmanDiaconis = __esm({
  "node_modules/d3-array/src/threshold/freedmanDiaconis.js"() {
    init_array();
    init_ascending();
    init_number();
    init_quantile();
  }
});

// node_modules/d3-array/src/threshold/scott.js
var init_scott = __esm({
  "node_modules/d3-array/src/threshold/scott.js"() {
    init_deviation();
  }
});

// node_modules/d3-array/src/max.js
function max_default(values, valueof) {
  var n = values.length, i = -1, value, max;
  if (valueof == null) {
    while (++i < n) {
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) {
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) {
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }
  return max;
}
var init_max = __esm({
  "node_modules/d3-array/src/max.js"() {
  }
});

// node_modules/d3-array/src/mean.js
var init_mean = __esm({
  "node_modules/d3-array/src/mean.js"() {
    init_number();
  }
});

// node_modules/d3-array/src/median.js
var init_median = __esm({
  "node_modules/d3-array/src/median.js"() {
    init_ascending();
    init_number();
    init_quantile();
  }
});

// node_modules/d3-array/src/merge.js
var init_merge = __esm({
  "node_modules/d3-array/src/merge.js"() {
  }
});

// node_modules/d3-array/src/min.js
function min_default(values, valueof) {
  var n = values.length, i = -1, value, min;
  if (valueof == null) {
    while (++i < n) {
      if ((value = values[i]) != null && value >= value) {
        min = value;
        while (++i < n) {
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;
        while (++i < n) {
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }
  return min;
}
var init_min = __esm({
  "node_modules/d3-array/src/min.js"() {
  }
});

// node_modules/d3-array/src/permute.js
var init_permute = __esm({
  "node_modules/d3-array/src/permute.js"() {
  }
});

// node_modules/d3-array/src/scan.js
var init_scan = __esm({
  "node_modules/d3-array/src/scan.js"() {
    init_ascending();
  }
});

// node_modules/d3-array/src/shuffle.js
var init_shuffle = __esm({
  "node_modules/d3-array/src/shuffle.js"() {
  }
});

// node_modules/d3-array/src/sum.js
function sum_default(values, valueof) {
  var n = values.length, i = -1, value, sum = 0;
  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i])
        sum += value;
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values))
        sum += value;
    }
  }
  return sum;
}
var init_sum = __esm({
  "node_modules/d3-array/src/sum.js"() {
  }
});

// node_modules/d3-array/src/transpose.js
var init_transpose = __esm({
  "node_modules/d3-array/src/transpose.js"() {
    init_min();
  }
});

// node_modules/d3-array/src/zip.js
var init_zip = __esm({
  "node_modules/d3-array/src/zip.js"() {
    init_transpose();
  }
});

// node_modules/d3-array/src/index.js
var init_src = __esm({
  "node_modules/d3-array/src/index.js"() {
    init_bisect();
    init_ascending();
    init_bisector();
    init_cross();
    init_descending();
    init_deviation();
    init_extent();
    init_histogram();
    init_freedmanDiaconis();
    init_scott();
    init_sturges();
    init_max();
    init_mean();
    init_median();
    init_merge();
    init_min();
    init_pairs();
    init_permute();
    init_quantile();
    init_range();
    init_scan();
    init_shuffle();
    init_sum();
    init_ticks();
    init_transpose();
    init_variance();
    init_zip();
  }
});

export {
  ascending_default,
  bisector_default,
  bisect_default,
  range_default,
  ticks_default,
  tickIncrement,
  tickStep,
  quantile_default,
  max_default,
  min_default,
  sum_default,
  init_src
};
//# sourceMappingURL=chunk-7J7CICHE.js.map
