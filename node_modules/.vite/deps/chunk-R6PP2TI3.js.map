{
  "version": 3,
  "sources": ["../../@deck.gl/react/src/utils/use-isomorphic-layout-effect.ts", "../../@deck.gl/react/src/utils/inherits-from.ts", "../../@deck.gl/react/src/utils/evaluate-children.ts", "../../@deck.gl/react/src/utils/extract-jsx-layers.ts", "../../@deck.gl/react/src/utils/position-children-under-views.ts", "../../@deck.gl/react/src/utils/extract-styles.ts", "../../@deck.gl/react/src/deckgl.ts", "../../@deck.gl/react/src/index.ts"],
  "sourcesContent": ["// From https://github.com/streamich/react-use/blob/master/src/useIsomorphicLayoutEffect.ts\n// useLayoutEffect but does not trigger warning in server-side rendering\nimport {useEffect, useLayoutEffect} from 'react';\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport default useIsomorphicLayoutEffect;\n", "// Check if one JavaScript class inherits from another\nexport function inheritsFrom<T>(Type: any, ParentType: T): Type is T {\n  while (Type) {\n    if (Type === ParentType) {\n      return true;\n    }\n    Type = Object.getPrototypeOf(Type);\n  }\n  return false;\n}\n", "import * as React from 'react';\nimport {cloneElement} from 'react';\n\nconst MAP_STYLE = {position: 'absolute', zIndex: -1};\n\nexport default function evaluateChildren(\n  children: React.ReactNode | Function,\n  childProps: any\n): React.ReactNode {\n  if (typeof children === 'function') {\n    return children(childProps);\n  }\n  if (Array.isArray(children)) {\n    return children.map(child => evaluateChildren(child, childProps));\n  }\n  if (isComponent(children)) {\n    // Special treatment for react-map-gl's Map component\n    // to support shorthand use case <DeckGL><StaticMap /></DeckGL>\n    if (isReactMap(children)) {\n      // Place map under the canvas\n      childProps.style = MAP_STYLE;\n      return cloneElement(children, childProps);\n    }\n    if (needsDeckGLViewProps(children)) {\n      return cloneElement(children, childProps);\n    }\n  }\n\n  return children;\n}\n\nexport function isComponent(child: React.ReactNode): child is React.ReactElement {\n  return (child && typeof child === 'object' && 'type' in child) || false;\n}\n\nfunction isReactMap(child: React.ReactElement): boolean {\n  return child.props?.mapStyle;\n}\n\nfunction needsDeckGLViewProps(child: React.ReactElement): boolean {\n  const componentClass = child.type;\n  // @ts-expect-error deckGLViewProps is a custom hack defined on the constructor (nebula.gl)\n  return componentClass && componentClass.deckGLViewProps;\n}\n", "import * as React from 'react';\nimport {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\nimport {isComponent} from './evaluate-children';\nimport type {LayersList} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node: React.ReactNode): React.ReactNode {\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({\n  children,\n  layers = [],\n  views = null\n}: {\n  children?: React.ReactNode;\n  layers?: LayersList;\n  views?: View | View[] | null;\n}): {\n  children: React.ReactNode[];\n  layers: LayersList;\n  views: View | View[] | null;\n} {\n  const reactChildren: React.ReactNode[] = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers: LayersList = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews: Record<string, View> = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        // @ts-ignore Cannot instantiate an abstract class (View)\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType: typeof Layer, reactProps: any): Layer {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  // @ts-ignore Cannot instantiate an abstract class (Layer)\n  return new LayerType(props);\n}\n", "import * as React from 'react';\nimport {createElement} from 'react';\nimport {View} from '@deck.gl/core';\nimport {inheritsFrom} from './inherits-from';\nimport evaluateChildren, {isComponent} from './evaluate-children';\n\nimport type {Deck, DeckProps, Viewport} from '@deck.gl/core';\nimport type {EventManager} from 'mjolnir.js';\n\nexport type DeckGLContextValue = {\n  viewport: Viewport;\n  container: HTMLElement;\n  eventManager: EventManager;\n  onViewStateChange: DeckProps['onViewStateChange'];\n};\n\n// Iterate over views and reposition children associated with views\n// TODO - Can we supply a similar function for the non-React case?\nexport default function positionChildrenUnderViews({\n  children,\n  deck,\n  ContextProvider\n}: {\n  children: React.ReactNode[];\n  deck?: Deck;\n  ContextProvider?: React.Context<DeckGLContextValue>['Provider'];\n}): React.ReactNode[] {\n  // @ts-expect-error accessing protected property\n  const {viewManager} = deck || {};\n\n  if (!viewManager || !viewManager.views.length) {\n    return [];\n  }\n\n  const views: Record<\n    string,\n    {\n      viewport: Viewport;\n      children: React.ReactNode[];\n    }\n  > = {};\n  const defaultViewId = (viewManager.views[0] as View).id;\n\n  // Sort children by view id\n  for (const child of children) {\n    // Unless child is a View, position / render as part of the default view\n    let viewId = defaultViewId;\n    let viewChildren = child;\n\n    if (isComponent(child) && inheritsFrom(child.type, View)) {\n      viewId = child.props.id || defaultViewId;\n      viewChildren = child.props.children;\n    }\n\n    const viewport = viewManager.getViewport(viewId) as Viewport;\n    const viewState = viewManager.getViewState(viewId);\n\n    // Drop (auto-hide) elements with viewId that are not matched by any current view\n    if (viewport) {\n      viewState.padding = viewport.padding;\n      const {x, y, width, height} = viewport;\n      // Resolve potentially relative dimensions using the deck.gl container size\n      viewChildren = evaluateChildren(viewChildren, {\n        x,\n        y,\n        width,\n        height,\n        viewport,\n        viewState\n      });\n\n      if (!views[viewId]) {\n        views[viewId] = {\n          viewport,\n          children: []\n        };\n      }\n      views[viewId].children.push(viewChildren);\n    }\n  }\n\n  // Render views\n  return Object.keys(views).map(viewId => {\n    const {viewport, children: viewChildren} = views[viewId];\n    const {x, y, width, height} = viewport;\n    const style = {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height\n    };\n\n    const key = `view-${viewId}`;\n    // If children is passed as an array, React will throw the \"each element in a list needs\n    // a key\" warning. Sending each child as separate arguments removes this requirement.\n    const viewElement = createElement('div', {key, id: key, style}, ...viewChildren);\n\n    if (ContextProvider) {\n      const contextValue: DeckGLContextValue = {\n        viewport,\n        // @ts-expect-error accessing protected property\n        container: deck.canvas.offsetParent,\n        // @ts-expect-error accessing protected property\n        eventManager: deck.eventManager,\n        onViewStateChange: params => {\n          params.viewId = viewId;\n          // @ts-expect-error accessing protected method\n          deck._onViewStateChange(params);\n        }\n      };\n      return createElement(ContextProvider, {key, value: contextValue}, viewElement);\n    }\n\n    return viewElement;\n  });\n}\n", "import * as React from 'react';\n\nconst CANVAS_ONLY_STYLES = {\n  mixBlendMode: null\n};\n\nexport default function extractStyles({\n  width,\n  height,\n  style\n}: {\n  width?: string | number;\n  height?: string | number;\n  style?: Partial<CSSStyleDeclaration> | null;\n}): {\n  containerStyle: React.CSSProperties;\n  canvasStyle: React.CSSProperties;\n} {\n  // This styling is enforced for correct positioning with children\n  const containerStyle: React.CSSProperties = {\n    position: 'absolute',\n    zIndex: 0,\n    left: 0,\n    top: 0,\n    width,\n    height\n  };\n\n  // Fill the container\n  const canvasStyle: React.CSSProperties = {\n    left: 0,\n    top: 0\n  };\n\n  if (style) {\n    for (const key in style) {\n      if (key in CANVAS_ONLY_STYLES) {\n        // apply style to the canvas, but not deck's children, e.g. mix-blend-mode\n        canvasStyle[key] = style[key];\n      } else {\n        // apply style to the container, e.g. position/flow settings\n        containerStyle[key] = style[key];\n      }\n    }\n  }\n\n  return {containerStyle, canvasStyle};\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport {\n  createElement,\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\nimport {Deck} from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nimport type {DeckGLContextValue} from './utils/position-children-under-views';\nimport type {DeckProps, Viewport} from '@deck.gl/core';\n\n/* eslint-disable max-statements, accessor-pairs */\ntype DeckInstanceRef = {\n  deck?: Deck;\n  redrawReason?: string | null;\n  lastRenderedViewports?: Viewport[];\n  viewStateUpdateRequested?: any;\n  interactionStateUpdateRequested?: any;\n  forceUpdate: () => void;\n  version: number;\n  control: React.ReactHTMLElement<HTMLElement> | null;\n};\n\n// Remove prop types in the base Deck class that support externally supplied canvas/WebGLContext\n/** DeckGL React component props */\nexport type DeckGLProps = Omit<\n  DeckProps,\n  'width' | 'height' | 'gl' | 'parent' | 'canvas' | '_customRender'\n> & {\n  Deck?: typeof Deck;\n  width?: string | number;\n  height?: string | number;\n  children?: React.ReactNode;\n  ContextProvider?: React.Context<DeckGLContextValue>['Provider'];\n};\n\nexport type DeckGLRef = {\n  deck?: Deck;\n  pickObject: Deck['pickObject'];\n  pickObjects: Deck['pickObjects'];\n  pickMultipleObjects: Deck['pickMultipleObjects'];\n};\n\nfunction getRefHandles(thisRef: DeckInstanceRef): DeckGLRef {\n  return {\n    get deck() {\n      return thisRef.deck;\n    },\n    // The following method can only be called after ref is available, by which point deck is defined in useEffect\n    pickObject: opts => thisRef.deck!.pickObject(opts),\n    pickMultipleObjects: opts => thisRef.deck!.pickMultipleObjects(opts),\n    pickObjects: opts => thisRef.deck!.pickObjects(opts)\n  };\n}\n\nfunction redrawDeck(thisRef: DeckInstanceRef) {\n  if (thisRef.redrawReason) {\n    // Only redraw if we have received a dirty flag\n    // @ts-expect-error accessing protected method\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(\n  thisRef: DeckInstanceRef,\n  DeckClass: typeof Deck,\n  props: DeckProps\n): Deck {\n  const deck = new DeckClass({\n    ...props,\n    // The Deck's animation loop is independent from React's render cycle, causing potential\n    // synchronization issues. We provide this custom render function to make sure that React\n    // and Deck update on the same schedule.\n    _customRender: redrawReason => {\n      // Save the dirty flag for later\n      thisRef.redrawReason = redrawReason;\n\n      // Viewport/view state is passed to child components as props.\n      // If they have changed, we need to trigger a React rerender to update children props.\n      const viewports = deck.getViewports();\n      if (thisRef.lastRenderedViewports !== viewports) {\n        // Viewports have changed, update children props first.\n        // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n        // so that the canvas does not get rendered before the child components update.\n        thisRef.forceUpdate();\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  });\n  return deck;\n}\n\nconst DeckGL = forwardRef<DeckGLRef, DeckGLProps>((props, ref) => {\n  // A mechanism to force redraw\n  const [version, setVersion] = useState(0);\n  // A reference to persistent states\n  const _thisRef = useRef<DeckInstanceRef>({\n    control: null,\n    version,\n    forceUpdate: () => setVersion(v => v + 1)\n  });\n  const thisRef = _thisRef.current;\n  // DOM refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // extract any deck.gl layers masquerading as react elements from props.children\n  const jsxProps = useMemo(\n    () => extractJSXLayers(props),\n    [props.layers, props.views, props.children]\n  );\n\n  // Callbacks\n  let inRender = true;\n\n  const handleViewStateChange: DeckProps['onViewStateChange'] = params => {\n    if (inRender && props.viewState) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange?.(params);\n  };\n\n  const handleInteractionStateChange: DeckProps['onInteractionStateChange'] = params => {\n    if (inRender) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange?.(params);\n    }\n  };\n\n  // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n  // the next animation frame.\n  // Needs to be called both from initial mount, and when new props are received\n  const deckProps = useMemo(() => {\n    const forwardProps: DeckProps = {\n      ...props,\n      // Override user styling props. We will set the canvas style in render()\n      style: null,\n      width: '100%',\n      height: '100%',\n      parent: containerRef.current,\n      canvas: canvasRef.current,\n      layers: jsxProps.layers,\n      views: jsxProps.views,\n      onViewStateChange: handleViewStateChange,\n      onInteractionStateChange: handleInteractionStateChange\n    };\n\n    // The defaultValue for _customRender is null, which would overwrite the definition\n    // of _customRender. Remove to avoid frequently redeclaring the method here.\n    delete forwardProps._customRender;\n\n    if (thisRef.deck) {\n      thisRef.deck.setProps(forwardProps);\n    }\n\n    return forwardProps;\n  }, [props]);\n\n  useEffect(() => {\n    const DeckClass = props.Deck || Deck;\n\n    thisRef.deck = createDeckInstance(thisRef, DeckClass, {\n      ...deckProps,\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    });\n\n    return () => thisRef.deck?.finalize();\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    redrawDeck(thisRef);\n\n    // Execute deferred callbacks\n    const {viewStateUpdateRequested, interactionStateUpdateRequested} = thisRef;\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n\n  useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n\n  const currentViewports =\n    thisRef.deck && thisRef.deck.isInitialized ? thisRef.deck.getViewports() : undefined;\n\n  const {ContextProvider, width, height, id, style} = props;\n\n  const {containerStyle, canvasStyle} = useMemo(\n    () => extractStyles({width, height, style}),\n    [width, height, style]\n  );\n\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  if (\n    (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n    thisRef.version !== version // case 3 just before deck redraws\n  ) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider\n    });\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    thisRef.control = createElement(\n      'div',\n      {id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle},\n      [canvas, childrenUnderViews]\n    );\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\n\nDeckGL.defaultProps = Deck.defaultProps;\n\nexport default DeckGL;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport {default as DeckGL} from './deckgl';\nexport {default} from './deckgl';\n\n// Types\nexport type {DeckGLContextValue} from './utils/position-children-under-views';\nexport type {DeckGLRef, DeckGLProps} from './deckgl';\n"],
  "mappings": "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",
  "names": ["useIsomorphicLayoutEffect", "window", "useLayoutEffect", "useEffect", "inheritsFrom", "Type", "ParentType", "Object", "getPrototypeOf", "children", "childProps", "Array", "isArray", "map", "child", "evaluateChildren", "isComponent", "isReactMap", "style", "MAP_STYLE", "cloneElement", "needsDeckGLViewProps", "props", "mapStyle", "componentClass", "type", "deckGLViewProps", "import_react", "position", "zIndex", "wrapInView", "node", "createElement", "View", "Array", "isArray", "map", "isComponent", "type", "Fragment", "props", "children", "inheritsFrom", "layers", "views", "reactChildren", "jsxLayers", "jsxViews", "React", "Children", "forEach", "reactElement", "ElementType", "Layer", "layer", "createLayer", "push", "id", "view", "Object", "keys", "length", "values", "LayerType", "reactProps", "defaultProps", "key", "import_react", "children", "deck", "ContextProvider", "viewManager", "views", "length", "defaultViewId", "id", "child", "viewId", "viewChildren", "isComponent", "inheritsFrom", "type", "View", "props", "viewport", "getViewport", "viewState", "getViewState", "padding", "x", "y", "width", "height", "evaluateChildren", "push", "Object", "keys", "map", "style", "position", "left", "top", "key", "viewElement", "createElement", "contextValue", "container", "canvas", "offsetParent", "eventManager", "onViewStateChange", "params", "_onViewStateChange", "value", "import_react", "width", "height", "style", "containerStyle", "position", "zIndex", "left", "top", "canvasStyle", "key", "CANVAS_ONLY_STYLES", "mixBlendMode", "getRefHandles", "thisRef", "deck", "pickObject", "opts", "pickMultipleObjects", "pickObjects", "redrawDeck", "redrawReason", "_drawLayers", "createDeckInstance", "DeckClass", "props", "_customRender", "viewports", "getViewports", "lastRenderedViewports", "forceUpdate", "import_react", "DeckGL", "forwardRef", "ref", "version", "setVersion", "useState", "_thisRef", "useRef", "control", "v", "current", "containerRef", "canvasRef", "jsxProps", "useMemo", "extractJSXLayers", "layers", "views", "children", "inRender", "handleViewStateChange", "params", "viewState", "viewStateUpdateRequested", "onViewStateChange", "handleInteractionStateChange", "interactionStateUpdateRequested", "onInteractionStateChange", "deckProps", "forwardProps", "style", "width", "height", "parent", "canvas", "setProps", "useEffect", "Deck", "finalize", "useIsomorphicLayoutEffect", "useImperativeHandle", "currentViewports", "isInitialized", "undefined", "ContextProvider", "id", "containerStyle", "canvasStyle", "extractStyles", "childrenUnderViews", "positionChildrenUnderViews", "createElement", "key", "defaultProps", "init_esm"]
}
